diff --git a/build/msvc/portaudio.def b/build/msvc/portaudio.def
index bdaa8ee..c3ea7b7 100644
--- a/build/msvc/portaudio.def
+++ b/build/msvc/portaudio.def
@@ -45,6 +45,7 @@ PaWasapi_GetDeviceDefaultFormat     @56
 PaWasapi_GetDeviceRole              @57
 PaWasapi_ThreadPriorityBoost        @58
 PaWasapi_ThreadPriorityRevert       @59
-PaWasapi_GetFramesPerHostBuffer     @60
-PaWasapi_GetJackDescription         @61
-PaWasapi_GetJackCount               @62
\ No newline at end of file
+PaWasapi_IsLoopback                 @60
+PaWasapi_GetFramesPerHostBuffer     @61
+PaWasapi_GetJackDescription         @62
+PaWasapi_GetJackCount               @63
\ No newline at end of file
diff --git a/include/pa_win_wasapi.h b/include/pa_win_wasapi.h
index 1d86896..9a22e7c 100644
--- a/include/pa_win_wasapi.h
+++ b/include/pa_win_wasapi.h
@@ -314,6 +314,14 @@ int PaWasapi_GetDeviceDefaultFormat( void *pFormat, unsigned int nFormatSize, Pa
 */
 int/*PaWasapiDeviceRole*/ PaWasapi_GetDeviceRole( PaDeviceIndex nDevice );
 
+/** Returns device loopback indicator.
+ @param nDevice device index.
+
+ @return 0 = Not loopback, 1 = loopback, < 0 = PaErrorCode
+        if PortAudio is not initialized or an error is encountered.
+*/
+int PaWasapi_IsLoopback( PaDeviceIndex nDevice );
+
 
 /** Boost thread priority of calling thread (MMCSS). Use it for Blocking Interface only for thread
     which makes calls to Pa_WriteStream/Pa_ReadStream.
diff --git a/src/hostapi/wasapi/pa_win_wasapi.c b/src/hostapi/wasapi/pa_win_wasapi.c
index b12b91f..4748d47 100644
--- a/src/hostapi/wasapi/pa_win_wasapi.c
+++ b/src/hostapi/wasapi/pa_win_wasapi.c
@@ -413,6 +413,9 @@ typedef struct PaWasapiDeviceInfo
 
 	// Formfactor
 	EndpointFormFactor formFactor;
+
+	// Loopback indicator
+	int loopBack;
 }
 PaWasapiDeviceInfo;
 
@@ -1420,6 +1423,8 @@ PaError PaWasapi_Initialize( PaUtilHostApiRepresentation **hostApi, PaHostApiInd
     PaDeviceInfo *deviceInfoArray;
     HRESULT hr = S_OK;
 	UINT i;
+	UINT renderCount;
+	UINT devIndex;
 #ifndef PA_WINRT
     IMMDeviceCollection* pEndPoints = NULL;
 #else
@@ -1524,6 +1529,17 @@ PaError PaWasapi_Initialize( PaUtilHostApiRepresentation **hostApi, PaHostApiInd
         }
     }
 
+	hr = IMMDeviceEnumerator_EnumAudioEndpoints(paWasapi->enumerator, eRender, DEVICE_STATE_ACTIVE, &pEndPoints);
+	// We need to set the result to a value otherwise we will return paNoError
+	// [IF_FAILED_JUMP(hResult, error);]
+	IF_FAILED_INTERNAL_ERROR_JUMP(hr, result, error);
+	hr = IMMDeviceCollection_GetCount(pEndPoints, &renderCount);
+	// We need to set the result to a value otherwise we will return paNoError
+	// [IF_FAILED_JUMP(hResult, error);]
+	IF_FAILED_INTERNAL_ERROR_JUMP(hr, result, error);
+	SAFE_RELEASE(pEndPoints);
+	pEndPoints = NULL;
+
     hr = IMMDeviceEnumerator_EnumAudioEndpoints(paWasapi->enumerator, eAll, DEVICE_STATE_ACTIVE, &pEndPoints);
 	// We need to set the result to a value otherwise we will return paNoError
 	// [IF_FAILED_JUMP(hResult, error);]
@@ -1538,6 +1554,8 @@ PaError PaWasapi_Initialize( PaUtilHostApiRepresentation **hostApi, PaHostApiInd
 	paWasapi->deviceCount = 2;
 #endif
 
+	paWasapi->deviceCount += renderCount;
+
     paWasapi->devInfo = (PaWasapiDeviceInfo *)PaUtil_AllocateMemory(sizeof(PaWasapiDeviceInfo) * paWasapi->deviceCount);
     if (paWasapi->devInfo == NULL)
 	{
@@ -1566,7 +1584,7 @@ PaError PaWasapi_Initialize( PaUtilHostApiRepresentation **hostApi, PaHostApiInd
             goto error;
         }
 
-        for (i = 0; i < paWasapi->deviceCount; ++i)
+        for (devIndex = 0, i = 0; i < paWasapi->deviceCount; ++i, ++devIndex)
 		{
             PaDeviceInfo *deviceInfo  = &deviceInfoArray[i];
             deviceInfo->structVersion = 2;
@@ -1576,7 +1594,7 @@ PaError PaWasapi_Initialize( PaUtilHostApiRepresentation **hostApi, PaHostApiInd
 			PA_DEBUG(("WASAPI: ---------------\n"));
 
 		#ifndef PA_WINRT
-            hr = IMMDeviceCollection_Item(pEndPoints, i, &paWasapi->devInfo[i].device);
+            hr = IMMDeviceCollection_Item(pEndPoints, devIndex, &paWasapi->devInfo[i].device);
 			// We need to set the result to a value otherwise we will return paNoError
 			// [IF_FAILED_JUMP(hResult, error);]
 			IF_FAILED_INTERNAL_ERROR_JUMP(hr, result, error);
@@ -1804,6 +1822,36 @@ PaError PaWasapi_Initialize( PaUtilHostApiRepresentation **hostApi, PaHostApiInd
 
             (*hostApi)->deviceInfos[i] = deviceInfo;
             ++(*hostApi)->info.deviceCount;
+
+			if (paWasapi->devInfo[i].flow == eRender)
+			{
+				char *deviceName;
+				UINT deviceNameLen;
+				memcpy(&deviceInfoArray[i + 1], deviceInfo, sizeof(*deviceInfo));
+				memcpy(&paWasapi->devInfo[i + 1], &paWasapi->devInfo[i], sizeof(*paWasapi->devInfo));
+				i++;
+				paWasapi->devInfo[i].loopBack = 1;
+				deviceInfo = &deviceInfoArray[i];
+				deviceInfo->maxInputChannels = deviceInfo->maxOutputChannels;
+				deviceInfo->defaultHighInputLatency = deviceInfo->defaultHighOutputLatency;
+				deviceInfo->defaultLowInputLatency = deviceInfo->defaultLowOutputLatency;
+				deviceInfo->maxOutputChannels = 0;
+				deviceInfo->defaultHighOutputLatency = 0;
+				deviceInfo->defaultLowOutputLatency = 0;
+				PA_DEBUG(("WASAPI:%d| def.SR[%d] max.CH[%d] latency{hi[%f] lo[%f]} (LoopBack)\n", i, (UINT32)deviceInfo->defaultSampleRate,
+					deviceInfo->maxInputChannels, (float)deviceInfo->defaultHighInputLatency, (float)deviceInfo->defaultLowInputLatency));
+				IMMDevice_AddRef(paWasapi->devInfo[i].device);
+				deviceName = (char *)PaUtil_GroupAllocateMemory(paWasapi->allocations, MAX_STR_LEN + 1);
+				if (deviceName == NULL)
+				{
+					result = paInsufficientMemory;
+					goto error;
+				}
+				_snprintf(deviceName, MAX_STR_LEN - 1, "%s (loopback)", deviceInfo->name);
+				deviceInfo->name = deviceName;
+				(*hostApi)->deviceInfos[i] = deviceInfo;
+				++(*hostApi)->info.deviceCount;
+			}
         }
     }
 
@@ -1963,6 +2011,25 @@ int PaWasapi_GetDeviceRole( PaDeviceIndex nDevice )
 	return paWasapi->devInfo[ index ].formFactor;
 }
 
+// ------------------------------------------------------------------------------------------
+int PaWasapi_IsLoopback(PaDeviceIndex nDevice)
+{
+	PaError ret;
+	PaDeviceIndex index;
+	// Get API
+	PaWasapiHostApiRepresentation *paWasapi = _GetHostApi(&ret);
+	if (paWasapi == NULL)
+		return paNotInitialized;
+	// Get device index
+	ret = PaUtil_DeviceIndexToHostApiDeviceIndex(&index, nDevice, &paWasapi->inheritedHostApiRep);
+	if (ret != paNoError)
+		return ret;
+	// Validate index
+	if ((UINT32)index >= paWasapi->deviceCount)
+		return paInvalidDevice;
+	return paWasapi->devInfo[index].loopBack;
+}
+
 // ------------------------------------------------------------------------------------------
 PaError PaWasapi_GetFramesPerHostBuffer( PaStream *pStream, unsigned int *nInput, unsigned int *nOutput )
 {
@@ -2608,7 +2675,7 @@ static HRESULT CreateAudioClient(PaWasapiStream *pStream, PaWasapiSubStream *pSu
 		}*/
 
 		// select mixer
-		pSub->monoMixer = _GetMonoToStereoMixer(WaveToPaFormat(&pSub->wavex), (pInfo->flow == eRender ? MIX_DIR__1TO2 : MIX_DIR__2TO1_L));
+		pSub->monoMixer = _GetMonoToStereoMixer(WaveToPaFormat(&pSub->wavex), (output ? MIX_DIR__1TO2 : MIX_DIR__2TO1_L));
 		if (pSub->monoMixer == NULL)
 		{
 			(*pa_error) = paInvalidChannelCount;
@@ -2893,7 +2960,7 @@ static HRESULT CreateAudioClient(PaWasapiStream *pStream, PaWasapiSubStream *pSu
 			}*/
 
 			// Select mixer
-			pSub->monoMixer = _GetMonoToStereoMixer(WaveToPaFormat(&pSub->wavex), (pInfo->flow == eRender ? MIX_DIR__1TO2 : MIX_DIR__2TO1_L));
+			pSub->monoMixer = _GetMonoToStereoMixer(WaveToPaFormat(&pSub->wavex), (output ? MIX_DIR__1TO2 : MIX_DIR__2TO1_L));
 			if (pSub->monoMixer == NULL)
 			{
 				(*pa_error) = paInvalidChannelCount;
@@ -3210,6 +3277,9 @@ static PaError OpenStream( struct PaUtilHostApiRepresentation *hostApi,
 		if (fullDuplex)
 			stream->in.streamFlags = 0; // polling interface is implemented for full-duplex mode also
 
+		if (info->flow == eRender)
+			stream->in.streamFlags |= AUDCLNT_STREAMFLAGS_LOOPBACK;
+
 		// Fill parameters for Audio Client creation
 		stream->in.params.device_info       = info;
 		stream->in.params.stream_params     = (*inputParameters);
